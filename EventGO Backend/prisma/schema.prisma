// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ORGANIZER
}

enum EventCategory {
  CONCERT
  SPORTS
  PERFORMING_ARTS
  TECHNOLOGY
  EDUCATION
  FOOD_DRINK
  ART
  OTHER
}

enum EventStatus {
  ACTIVE
  CANCELLED
  COMPLETED
}

enum AttendanceStatus {
  PENDING
  APPROVED
  REJECTED
}

enum NotificationType {
  EVENT_UPDATED
  EVENT_CANCELLED
  EVENT_REMINDER
  ATTENDANCE_APPROVED
  ATTENDANCE_REJECTED
  ATTENDANCE_REQUEST_RECEIVED
  GENERAL_ANNOUNCEMENT
}

type Location {
  latitude  Float
  longitude Float
  address   String
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  organizedEvents Event[] @relation("EventOrganizer")
  // attendedEvents ve attendedEventIds kaldırıldı
  
  // Tek kaynak: EventAttendance
  attendanceRequests EventAttendance[]
  notifications UserNotification[]
}

model Event {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  date          DateTime
  location      Location
  category      EventCategory
  capacity      Int
  status        EventStatus   @default(ACTIVE)
  imageUrl      String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Relations
  organizerId   String        @db.ObjectId
  organizer     User          @relation("EventOrganizer", fields: [organizerId], references: [id])
  
  // Tek kaynak: EventAttendance
  attendanceRequests EventAttendance[]
}

model EventAttendance {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  status    AttendanceStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  
  // Relations
  userId    String           @db.ObjectId
  user      User             @relation(fields: [userId], references: [id])
  
  eventId   String           @db.ObjectId
  event     Event            @relation(fields: [eventId], references: [id])
  
  @@unique([userId, eventId]) 
}

model Notification {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  type        NotificationType 
  title       String
  message     String
  eventId     String?          @db.ObjectId
  createdAt   DateTime         @default(now())
  
  // Değişen alanlar için JSON field
  changedFields Json?           // Hangi alanların değiştiği ve eski/yeni değerleri
  eventSnapshot Json?           // Bildirimin gönderildiği andaki event durumu

  // İlişki
  userNotifications UserNotification[]
}


model UserNotification {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  userId         String       @db.ObjectId
  notificationId String       @db.ObjectId
  read           Boolean      @default(false)
  readAt         DateTime?

  // İlişkiler
  user           User         @relation(fields: [userId], references: [id])
  notification   Notification @relation(fields: [notificationId], references: [id])

  @@unique([userId, notificationId])
}
